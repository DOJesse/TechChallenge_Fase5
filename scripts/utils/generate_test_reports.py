#!/usr/bin/env python3
"""
Script para executar testes e gerar relat√≥rios completos
"""

import os
import sys
import subprocess
from datetime import datetime

def run_command(command, description):
    """Executa um comando e retorna o resultado"""
    print(f"\nüîÑ {description}...")
    print(f"Comando: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - Sucesso")
            return True
        else:
            print(f"‚ùå {description} - Falhou")
            print(f"Erro: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - Erro: {e}")
        return False

def main():
    """Fun√ß√£o principal para gerar relat√≥rios"""
    print("=" * 60)
    print("üß™ GERA√á√ÉO DE RELAT√ìRIOS DE TESTE")
    print("=" * 60)
    print(f"Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Detectar se estamos em um ambiente virtual
    venv_python = sys.executable
    pytest_cmd = f"{venv_python} -m pytest"
    
    # Criar diret√≥rio de relat√≥rios se n√£o existir
    os.makedirs("reports", exist_ok=True)
    
    # 1. Executar testes com cobertura e relat√≥rio HTML
    success = run_command(
        f"{pytest_cmd} --html=reports/test_report.html --self-contained-html",
        "Executando testes e gerando relat√≥rio HTML"
    )
    
    if not success:
        print("\n‚ùå Falha na execu√ß√£o dos testes. Abortando...")
        sys.exit(1)
    
    # 2. Gerar relat√≥rio de cobertura simples no terminal
    run_command(
        f"{pytest_cmd} --cov=src --cov-report=term-missing --tb=no -q",
        "Gerando relat√≥rio de cobertura no terminal"
    )
    
    # 3. Gerar relat√≥rio de cobertura HTML
    run_command(
        f"{pytest_cmd} --cov=src --cov-report=html:reports/coverage --tb=no -q",
        "Gerando relat√≥rio de cobertura HTML"
    )
    
    # 4. Gerar relat√≥rio JUnit XML
    run_command(
        f"{pytest_cmd} --junit-xml=reports/junit.xml --tb=no -q",
        "Gerando relat√≥rio JUnit XML"
    )
    
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIOS GERADOS:")
    print("=" * 60)
    
    reports = [
        ("Relat√≥rio HTML dos Testes", "reports/test_report.html"),
        ("Cobertura HTML", "reports/coverage/index.html"),
        ("Relat√≥rio JUnit XML", "reports/junit.xml"),
        ("Cobertura XML", "reports/coverage.xml"),
    ]
    
    for name, path in reports:
        if os.path.exists(path):
            abs_path = os.path.abspath(path)
            print(f"‚úÖ {name}: {abs_path}")
        else:
            print(f"‚ùå {name}: N√£o encontrado em {path}")
    
    print("\nüéâ Gera√ß√£o de relat√≥rios conclu√≠da!")
    print("\nPara visualizar os relat√≥rios HTML, abra os arquivos em um navegador.")

if __name__ == "__main__":
    main()
